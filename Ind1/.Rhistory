"<br><strong>Diferencia del precio: </strong>", round(columna_porcentaje),"%"),
highlightOptions = highlightOptions(color = "white",
weight = 2,
bringToFront = FALSE)) %>%
addLegend(pal = my_palette_sin_na, values = ~valores_sin_na, opacity = 0.7, title = "Porcentaje")#, na.label = "")
porcentaje_max <- round(max(df$columna_porcentaje) * 100)
dpto_max <- df$depto_origen[which.max(df$columna_porcentaje)][df$depto_origen!="ANTIOQUIA"]
dpto_max <- tolower(dpto_max)
words <- strsplit(dpto_max, " ")[[1]]
words <- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = "")
dpto_max <- paste(words, collapse = " ")
return(list(
grafico = p,
datos = df,
porcentaje_max = porcentaje_max,
dpto_max = dpto_max
))
}
ant_en_col()
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs2')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs2')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs2')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs4')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs5')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs5')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs5')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs5')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs5')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs5')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs6')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs6')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs6')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs6')
runApp()
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Ind4')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Ind3')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs6')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Ind4')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Ind4')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Ind4')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Ind4')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Pre3')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Ind4')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Pre3')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Pre3')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Pre3')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Pre3')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Ind4')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Pre3')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Pre3')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs1')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs4')
runApp('C:/Users/user/OneDrive - Universidad EAFIT/FAO_Tableros/Abs1')
shiny::runApp()
plot_data(0)
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) + # Establecer la fuente y el tamaño del texto
scale_x_continuous(breaks = seq(min(data$date_col), max(data$date_col), by = 1))  # Establecer las marcas del eje x
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) +  # Establecer la fuente y el tamaño del texto
scale_x_date(date_breaks = "6 months", date_labels = "%b %Y")  # Configurar el eje X
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0)
plot_data(0)$grafico
plot_data(0)$plot
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) + # Establecer la fuente y el tamaño del texto
scale_x_continuous(breaks = seq(min(data$date_col), max(data$date_col), by = 1))  # Establecer las marcas del eje x
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) +  # Establecer la fuente y el tamaño del texto
scale_x_date(date_breaks = "6 months", date_labels = "%b %Y", angle = 90)  # Configurar el eje X
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0)$plot
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) + # Establecer la fuente y el tamaño del texto
scale_x_continuous(breaks = seq(min(data$date_col), max(data$date_col), by = 1))  # Establecer las marcas del eje x
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +  # Establecer la fuente y el tamaño del texto
scale_x_date(date_breaks = "6 months", date_labels = "%b %Y", angle = 90)  # Configurar el eje X
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0)$plot
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) + # Establecer la fuente y el tamaño del texto
scale_x_continuous(breaks = seq(min(data$date_col), max(data$date_col), by = 1))  # Establecer las marcas del eje x
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +  # Establecer la fuente y el tamaño del texto
scale_x_date(date_breaks = "6 months", date_labels = "%b %Y")  # Configurar el eje X
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0)$plot
plot_data(0,2013)
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) + # Establecer la fuente y el tamaño del texto
scale_x_continuous(breaks = seq(min(data$date_col), max(data$date_col), by = 1))  # Establecer las marcas del eje x
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16))   # Establecer la fuente y el tamaño del texto
if (!is.null(anio)) {
p_plano<-p_plano+scale_x_date(date_breaks = "3 months", date_labels = "%b %Y")+  # Configurar el eje X
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
}
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0)$plot
plot_data(0)$plot
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) + # Establecer la fuente y el tamaño del texto
scale_x_continuous(breaks = seq(min(data$date_col), max(data$date_col), by = 1))  # Establecer las marcas del eje x
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16))   # Establecer la fuente y el tamaño del texto
if (is.null(anio)) {
p_plano<-p_plano+scale_x_date(date_breaks = "3 months", date_labels = "%b %Y")+  # Configurar el eje X
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
}
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0)$plot
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) + # Establecer la fuente y el tamaño del texto
scale_x_continuous(breaks = seq(min(data$date_col), max(data$date_col), by = 1))  # Establecer las marcas del eje x
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16))   # Establecer la fuente y el tamaño del texto
if (is.null(anio)) {
p_plano<-p_plano+scale_x_date(date_breaks = "3 months", date_labels = "%m-%y")+  # Configurar el eje X
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
}
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0)$plot
runApp()
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) + # Establecer la fuente y el tamaño del texto
scale_x_continuous(breaks = seq(min(data$date_col), max(data$date_col), by = 1))  # Establecer las marcas del eje x
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16))   # Establecer la fuente y el tamaño del texto
if (!is.null(anio)) {
p_plano<-p_plano+scale_x_date(date_breaks = "1 months", date_labels = "%b")+  # Configurar el eje X
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
}
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0)$plot
plot_data(0,2013)
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16)) + # Establecer la fuente y el tamaño del texto
scale_x_continuous(breaks = seq(min(data$date_col), max(data$date_col), by = 1))  # Establecer las marcas del eje x
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 16))   # Establecer la fuente y el tamaño del texto
if (!is.null(anio)) {
p_plano<-p_plano+scale_x_date(date_breaks = "1 months", date_labels = "%b")#+  # Configurar el eje X
#theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
}
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0,2013)
runApp()
runApp()
