shiny::runApp()
shiny::runApp()
importancia(2023)
importancia <- function(Año = NULL, Mes = NULL, municipios = 10, Producto = NULL) {
df <- proviene_antioquia
# Año seleccionado
if (!is.null(Año)) {
df <- df %>% dplyr::filter(anio == Año)
}
# Mes seleccionado, si se proporciona
if (!is.null(Mes)) {
df <- df %>% dplyr::filter(mes == Mes)
}
# Si se especifica un producto
if (!is.null(Producto)) {
df <- df %>% dplyr::filter(producto == Producto)
}
# Determinar la columna de porcentaje
if (!is.null(Año) && !is.null(Mes) && !is.null(Producto)) {
df<- df  %>%
distinct(anio,mpio_destino,producto,mes, .keep_all = TRUE) %>%
select(anio,mpio_destino, mes, producto, mes_municipio_producto_porcentaje)
df <- df %>% rename( columna_porcentaje = mes_municipio_producto_porcentaje)
} else if (!is.null(Año) && !is.null(Mes)) {
df<- df  %>%
distinct(anio,mpio_destino,mes, .keep_all = TRUE) %>%
select(anio,mpio_destino, mes, mes_municipio_porcentaje)
columna_porcentaje <- "mes_municipio_porcentaje"
df <- df %>% rename( columna_porcentaje = mes_municipio_porcentaje)
} else if (!is.null(Año) && !is.null(Producto)) {
df<- df  %>%
distinct(anio,mpio_destino,producto, .keep_all = TRUE) %>%
select(anio,mpio_destino, producto, anio_municipio_producto_porcentaje)
columna_porcentaje <- "anio_municipio_producto_porcentaje"
df <- df %>% rename( columna_porcentaje =anio_municipio_producto_porcentaje)
} else if (!is.null(Año)){
# No se tienen ni mes ni producto
df<- df  %>%
distinct(anio,mpio_destino, .keep_all = TRUE) %>%
select(anio,mpio_destino, anio_municipio_porcentaje)
df <- df %>% rename( columna_porcentaje = anio_municipio_porcentaje)
}else if (!is.null(Producto)){
# No se tienen ni mes ni producto
df<- df  %>%
distinct(mpio_destino,producto, .keep_all = TRUE) %>%
select(mpio_destino,producto, municipio_producto_porcentaje)
df <- df %>% rename( columna_porcentaje = municipio_producto_porcentaje)
} else {
df<- df  %>%
distinct(mpio_destino, .keep_all = TRUE) %>%
select(mpio_destino, municipio_porcentaje)
df <- df %>% rename( columna_porcentaje = municipio_porcentaje)
}
df <- df  %>%
arrange(desc(all_of(columna_porcentaje))) %>%
mutate(mpio_destino = factor(mpio_destino, levels = mpio_destino)) %>%
head(municipios)
# Grafica
# Crear un título dinámico
titulo <- paste0("Importancia de los ", length(unique(df$mpio_destino)), " municipios principales", ifelse(is.null(Año), "", paste0(" en el año ", Año)),
ifelse(is.null(Mes), "", paste0(" en el mes de ", Mes)),
ifelse(is.null(Producto), "", paste0(" - ", Producto)))
# Definir los colores de inicio y fin
#start_color <- "#6B0077"
#end_color <- "#ACE1C2"
# Crear una función de interpolación de colores
#color_func <- colorRampPalette(c(start_color, end_color))
# Generar una paleta de N colores
#N <- municipios
#col_palette <- color_func(N)
col_palette <- c("#1A4922", "#2E7730", "#0D8D38", "#85A728", "#AEBF22", "#F2E203", "#F1B709", "#F39F06", "#BE7E11",
"#08384D", "#094B5C", "#00596C", "#006A75", "#007A71", "#00909C", "#0088BB", "#007CC3", "#456ABB")
if(nrow(df)==0){
p <- print("No hay datos disponibles")
}else{
df$tooltip_text <- paste("Ciudad de origen: ", df$mpio_destino, "<br>Porcentaje: ", round(df$columna_porcentaje*100,digits = 2),"%")
# Ahora puedes usar col_palette en tu gráfico
p<-ggplot(df, aes(x = forcats::fct_reorder(mpio_destino, as.numeric(all_of(columna_porcentaje))), y = as.numeric(all_of(columna_porcentaje)), fill = mpio_destino,text = tooltip_text)) +
geom_bar(stat = "identity") +
geom_text(aes(label = scales::percent(as.numeric(all_of(columna_porcentaje)), accuracy = 1)), hjust = 0.1) +
coord_flip() +
labs(x = "", y = "", title = "") +
scale_fill_manual(values = col_palette) +  # Agregar la paleta de colores
theme_minimal() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none")#,axis.text.x = element_blank())
p <- plotly::ggplotly(p, tooltip = "text")
}
df<-df%>%select(-tooltip_text)
porcentaje_max <- ifelse(nrow(df)==0, "", round(max(df$columna_porcentaje)*100, digits = 2))
lugar_max<-df$mpio_destino[which.max(df$columna_porcentaje)]#)
return(
list(
grafico = p,
datos = df,
porcentaje_max=porcentaje_max,
lugar_max=lugar_max
)
)
}
importancia(2023)
importancia <- function(Año = NULL, Mes = NULL, municipios = 10, Producto = NULL) {
df <- proviene_antioquia
# Año seleccionado
if (!is.null(Año)) {
df <- df %>% dplyr::filter(anio == Año)
}
# Mes seleccionado, si se proporciona
if (!is.null(Mes)) {
df <- df %>% dplyr::filter(mes == Mes)
}
# Si se especifica un producto
if (!is.null(Producto)) {
df <- df %>% dplyr::filter(producto == Producto)
}
# Determinar la columna de porcentaje
if (!is.null(Año) && !is.null(Mes) && !is.null(Producto)) {
df<- df  %>%
distinct(anio,mpio_destino,producto,mes, .keep_all = TRUE) %>%
select(anio,mpio_destino, mes, producto, mes_municipio_producto_porcentaje)
df <- df %>% rename( columna_porcentaje = mes_municipio_producto_porcentaje)
} else if (!is.null(Año) && !is.null(Mes)) {
df<- df  %>%
distinct(anio,mpio_destino,mes, .keep_all = TRUE) %>%
select(anio,mpio_destino, mes, mes_municipio_porcentaje)
columna_porcentaje <- "mes_municipio_porcentaje"
df <- df %>% rename( columna_porcentaje = mes_municipio_porcentaje)
} else if (!is.null(Año) && !is.null(Producto)) {
df<- df  %>%
distinct(anio,mpio_destino,producto, .keep_all = TRUE) %>%
select(anio,mpio_destino, producto, anio_municipio_producto_porcentaje)
columna_porcentaje <- "anio_municipio_producto_porcentaje"
df <- df %>% rename( columna_porcentaje =anio_municipio_producto_porcentaje)
} else if (!is.null(Año)){
# No se tienen ni mes ni producto
df<- df  %>%
distinct(anio,mpio_destino, .keep_all = TRUE) %>%
select(anio,mpio_destino, anio_municipio_porcentaje)
df <- df %>% rename( columna_porcentaje = anio_municipio_porcentaje)
}else if (!is.null(Producto)){
# No se tienen ni mes ni producto
df<- df  %>%
distinct(mpio_destino,producto, .keep_all = TRUE) %>%
select(mpio_destino,producto, municipio_producto_porcentaje)
df <- df %>% rename( columna_porcentaje = municipio_producto_porcentaje)
} else {
df<- df  %>%
distinct(mpio_destino, .keep_all = TRUE) %>%
select(mpio_destino, municipio_porcentaje)
df <- df %>% rename( columna_porcentaje = municipio_porcentaje)
}
df <- df  %>%
arrange(desc(all_of(columna_porcentaje))) %>%
mutate(mpio_destino = factor(mpio_destino, levels = mpio_destino)) %>%
head(municipios)
# Grafica
# Crear un título dinámico
titulo <- paste0("Importancia de los ", length(unique(df$mpio_destino)), " municipios principales", ifelse(is.null(Año), "", paste0(" en el año ", Año)),
ifelse(is.null(Mes), "", paste0(" en el mes de ", Mes)),
ifelse(is.null(Producto), "", paste0(" - ", Producto)))
# Definir los colores de inicio y fin
#start_color <- "#6B0077"
#end_color <- "#ACE1C2"
# Crear una función de interpolación de colores
#color_func <- colorRampPalette(c(start_color, end_color))
# Generar una paleta de N colores
#N <- municipios
#col_palette <- color_func(N)
col_palette <- c("#1A4922", "#2E7730", "#0D8D38", "#85A728", "#AEBF22", "#F2E203", "#F1B709", "#F39F06", "#BE7E11",
"#08384D", "#094B5C", "#00596C", "#006A75", "#007A71", "#00909C", "#0088BB", "#007CC3", "#456ABB")
if(nrow(df)==0){
p <- print("No hay datos disponibles")
}else{
df$tooltip_text <- paste("Ciudad de origen: ", df$mpio_destino, "<br>Porcentaje: ", round(df$columna_porcentaje*100,digits = 2),"%")
# Ahora puedes usar col_palette en tu gráfico
p<-ggplot(df, aes(x = forcats::fct_reorder(mpio_destino, as.numeric(all_of(columna_porcentaje))), y = as.numeric(all_of(columna_porcentaje)), fill = mpio_destino,text = tooltip_text)) +
geom_bar(stat = "identity") +
geom_text(aes(label = scales::percent(as.numeric(all_of(columna_porcentaje)), accuracy = 1)), hjust = 0.1) +
coord_flip() +
labs(x = "", y = "", title = "") +
scale_fill_manual(values = col_palette) +  # Agregar la paleta de colores
theme_minimal() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "none")#,axis.text.x = element_blank())
p <- plotly::ggplotly(p, tooltip = "text")
}
df<-df%>%select(-tooltip_text)
porcentaje_max <- ifelse(nrow(df)==0, "", round(max(df$columna_porcentaje)*100, digits = 2))
lugar_max <- ifelse(nrow(df) == 0, "", as.character(df$mpio_destino)[which.max(df$columna_porcentaje)])
return(
list(
grafico = p,
datos = df,
porcentaje_max=porcentaje_max,
lugar_max=lugar_max
)
)
}
importancia(2023)
runApp()
runApp('~/GitHub/Tableros/Abs1')
runApp('~/GitHub/Tableros/Maps2')
