shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp('~/GitHub/Tableros/Abs6')
runApp('~/GitHub/Tableros/Abs7')
?geom_line
#####
# FUNCION PARA VISUALIZAR LOS RESULTADOS
# FUNCION 2
# LINEA DE TIEMPO
neto_grafica <- function(tipo, productos_seleccionados = "") {
if (tipo == 1 ) {
df <- data_anual
} else if (tipo == 2) {
df <- data_anual_producto
df <- df %>%
select("anio","producto", "total_importado","sale_kg","ingresa_kg")
if (length(productos_seleccionados) == 0){
message("Para esta opcion debe escoger los productos que quiere graficar")
}
} else if (tipo == 3) {
df <- data_mensual
df <- df %>%
select("fecha","total_importado","sale_kg","ingresa_kg","mes")
df <- rename(df, anio = fecha)
} else if (tipo == 4) {
df <- data_mensual_producto
df <- df %>%
select("producto", "fecha","total_importado","sale_kg","ingresa_kg","mes")
df <- rename(df, anio = fecha)
if (length(productos_seleccionados) == 0){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
}
# Filtrar los productos seleccionados solo para las opciones 2 y 4
if (tipo %in% c(2)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$anio , "<br> Kg exportan:" , df$sale_kg, "<br> Kg Importan",df$ingresa_kg, "<br> Neto",df$total_importado)
p <- ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
} else if(tipo %in% c(4)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$anio , "<br>Mes:",df$mes, "<br> Kg exportan:" , df$sale_kg, "<br> Kg Importan",df$ingresa_kg, "<br> Neto",df$total_importado)
p<-ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else if(tipo %in% c(3)){
df$tooltip_text <- paste("Año: ", df$anio , "<br>Mes:",df$mes, "<br> Kg exportan:" , df$sale_kg, "<br> Kg Importan",df$ingresa_kg, "<br> Neto",df$total_importado)
p<-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else {
df$tooltip_text <- paste("Año: ", df$anio , "<br> Kg exportan:" , df$sale_kg, "<br> Kg Importan",df$ingresa_kg, "<br> Neto",df$total_importado)
p<-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}
min_ton<-round(min(df$total_importado)*-1)
fecha_min <- df$anio[which.min(df$total_importado)]
p <- plotly::ggplotly(p, tooltip = "text")
return(list(
grafico = p,
datos = df,
fecha_min=fecha_min,
min_ton=min_ton
))
}
neto_grafica(1)
#####
# FUNCION PARA VISUALIZAR LOS RESULTADOS
# FUNCION 2
# LINEA DE TIEMPO
neto_grafica <- function(tipo, productos_seleccionados = "") {
if (tipo == 1 ) {
df <- data_anual
} else if (tipo == 2) {
df <- data_anual_producto
df <- df %>%
select("anio","producto", "total_importado","sale_kg","ingresa_kg")
if (length(productos_seleccionados) == 0){
message("Para esta opcion debe escoger los productos que quiere graficar")
}
} else if (tipo == 3) {
df <- data_mensual
df <- df %>%
select("fecha","total_importado","sale_kg","ingresa_kg","mes")
df <- rename(df, anio = fecha)
} else if (tipo == 4) {
df <- data_mensual_producto
df <- df %>%
select("producto", "fecha","total_importado","sale_kg","ingresa_kg","mes")
df <- rename(df, anio = fecha)
if (length(productos_seleccionados) == 0){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
}
# Filtrar los productos seleccionados solo para las opciones 2 y 4
if (tipo %in% c(2)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$anio , "<br> Kg exportan:" , df$sale_kg, "<br> Kg Importan",df$ingresa_kg, "<br> Neto",df$total_importado)
p <- ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
} else if(tipo %in% c(4)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$anio , "<br>Mes:",df$mes, "<br> Kg exportan:" , df$sale_kg, "<br> Kg Importan",df$ingresa_kg, "<br> Neto",df$total_importado)
p<-ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else if(tipo %in% c(3)){
df$tooltip_text <- paste("Año: ", df$anio , "<br>Mes:",df$mes, "<br> Kg exportan:" , df$sale_kg, "<br> Kg Importan",df$ingresa_kg, "<br> Neto",df$total_importado)
p<-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else {
df$tooltip_text <- paste("Año: ", df$anio , "<br> Kg exportan:" , df$sale_kg, "<br> Kg Importan",df$ingresa_kg, "<br> Neto",df$total_importado)
p<-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}
min_ton<-round(min(df$total_importado)*-1)
fecha_min <- df$anio[which.min(df$total_importado)]
df<-df%>%select(-tooltip_text)
p <- plotly::ggplotly(p, tooltip = "text")
return(list(
grafico = p,
datos = df,
fecha_min=fecha_min,
min_ton=min_ton
))
}
neto_grafica(1)
neto_grafica(2, c("Carne de cerdo","Arroz"))
neto_grafica(3)
neto_grafica(4,c("Carne de cerdo","Arroz"))
runApp('~/GitHub/Tableros/Abs7')
runApp('~/GitHub/Tableros/Abs8')
runApp('~/GitHub/Tableros/Ind1')
runApp('~/GitHub/Tableros/Ind2')
runApp('~/GitHub/Tableros/Ind2')
grafica_indice_mun(1)
grafica_indice_mun <- function(tipo, anio_seleccionado = "", productos_seleccionados = "") {
if (tipo == 1 ) {
df <- IHH_anual_total
df$IHH <- df$IHH * 100
df <- df %>%
select("year", "IHH")
} else if (tipo == 2) {
df <- IHH_anual_producto
df$IHH <- df$IHH * 100
df <- df %>%
select("year","producto", "IHH")
if (length(productos_seleccionados) == 0){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
} else if (tipo == 3) {
df <- IHH_mensual_total
df$IHH <- df$IHH * 100
df <- df %>%
select("mes_y_ano","year","month","IHH")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == year)
}
} else if (tipo == 4) {
df <- IHH_mensual_producto
df$IHH <- df$IHH * 100
df <- df %>%
select("year","month","mes_y_ano","producto", "IHH")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == year)
}
}
if (tipo == 2) {
df <- rename(df, fecha = year)
df$tooltip_text <- paste("Año: ", df$fecha , "<br> Producto:",df$producto, "<br> IHH:" , round(df$IHH,3))
df <- df[df$producto %in% productos_seleccionados, ]
p <- ggplot(df, aes(x = fecha, y = IHH, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16)) +
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 4){
df <- rename(df, fecha = mes_y_ano)
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$year ,"<br> Mes:",df$month, "<br> Producto:",df$producto, "<br> IHH:" , round(df$IHH,3))
p <- ggplot(df, aes(x = fecha, y = IHH, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))
} else if (tipo == 1)  {
df <- rename(df, fecha = year)
df$tooltip_text <- paste("Año: ", df$fecha , "<br> IHH:" , round(df$IHH,3))
p <- ggplot(df, aes(x = fecha, y = IHH)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal() +
theme(text = element_text(family = "Prompt", size = 16)) +
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 3){
df <- rename(df, fecha = mes_y_ano)
df$tooltip_text <- paste("Año:", df$year ,"<br> Mes:",df$month, "<br> IHH:" , round(df$IHH,3))
p<- ggplot(df, aes(x = fecha, y = IHH)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal()  +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))
}
p <- plotly::ggplotly(p, tooltip = "text")
# Calcular el valor máximo del índice de vulnerabilidad
indice_max_ihh <- which.max(df$IHH)
max_IHH <- round(df$IHH[indice_max_ihh], 1)
fecha_max_vulnerabilidad <- df$fecha[indice_max_ihh]
producto_max_vulnerabilidad <- ifelse("producto" %in% names(df), df$producto[indice_max_ihh], NA)
# Devolver el gráfico, los datos y los valores máximos
return(list(
grafico = p,
datos = df,
max_vulnerabilidad = max_IHH,
fecha_max_vulnerabilidad = fecha_max_vulnerabilidad,
producto_max_vulnerabilidad = producto_max_vulnerabilidad
))
}
grafica_indice_mun(1)
grafica_indice_mun <- function(tipo, anio_seleccionado = "", productos_seleccionados = "") {
if (tipo == 1 ) {
df <- IHH_anual_total
df$IHH <- df$IHH * 100
df <- df %>%
select("year", "IHH")
} else if (tipo == 2) {
df <- IHH_anual_producto
df$IHH <- df$IHH * 100
df <- df %>%
select("year","producto", "IHH")
if (length(productos_seleccionados) == 0){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
} else if (tipo == 3) {
df <- IHH_mensual_total
df$IHH <- df$IHH * 100
df <- df %>%
select("mes_y_ano","year","month","IHH")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == year)
}
} else if (tipo == 4) {
df <- IHH_mensual_producto
df$IHH <- df$IHH * 100
df <- df %>%
select("year","month","mes_y_ano","producto", "IHH")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == year)
}
}
if (tipo == 2) {
df <- rename(df, fecha = year)
df$tooltip_text <- paste("Año: ", df$fecha , "<br> Producto:",df$producto, "<br> IHH:" , round(df$IHH,3))
df <- df[df$producto %in% productos_seleccionados, ]
p <- ggplot(df, aes(x = fecha, y = IHH, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16)) +
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 4){
df <- rename(df, fecha = mes_y_ano)
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$year ,"<br> Mes:",df$month, "<br> Producto:",df$producto, "<br> IHH:" , round(df$IHH,3))
p <- ggplot(df, aes(x = fecha, y = IHH, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))
} else if (tipo == 1)  {
df <- rename(df, fecha = year)
df$tooltip_text <- paste("Año: ", df$fecha , "<br> IHH:" , round(df$IHH,3))
p <- ggplot(df, aes(x = fecha, y = IHH)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal() +
theme(text = element_text(family = "Prompt", size = 16)) +
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 3){
df <- rename(df, fecha = mes_y_ano)
df$tooltip_text <- paste("Año:", df$year ,"<br> Mes:",df$month, "<br> IHH:" , round(df$IHH,3))
p<- ggplot(df, aes(x = fecha, y = IHH)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal()  +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))
}
p <- plotly::ggplotly(p, tooltip = "text")
# Calcular el valor máximo del índice de vulnerabilidad
indice_max_ihh <- which.max(df$IHH)
max_IHH <- round(df$IHH[indice_max_ihh], 1)
fecha_max_vulnerabilidad <- df$fecha[indice_max_ihh]
producto_max_vulnerabilidad <- ifelse("producto" %in% names(df), df$producto[indice_max_ihh], NA)
df<-df%>%select(-tooltip_text)
# Devolver el gráfico, los datos y los valores máximos
return(list(
grafico = p,
datos = df,
max_vulnerabilidad = max_IHH,
fecha_max_vulnerabilidad = fecha_max_vulnerabilidad,
producto_max_vulnerabilidad = producto_max_vulnerabilidad
))
}
grafica_indice_mun(1)
runApp('~/GitHub/Tableros/Ind1')
plot_data(1)
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind3')
grafica_indice(1)
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind2')
runApp('~/GitHub/Tableros/Ind1')
runApp('~/GitHub/Tableros/Ind4')
grafica_indice(1)
grafica_indice <- function(tipo, anio_seleccionado = "", productos_seleccionados = "") {
if (tipo == 1 ) {
df <- indice_v_anual
df$indice_vulnerabilidad <- df$indice_vulnerabilidad * 100
df <- df %>%
select("anio", "indice_vulnerabilidad")
} else if (tipo == 2) {
df <- indice_v_anual_producto
df$indice_vulnerabilidad <- df$indice_vulnerabilidad *100
df <- df %>%
select("anio","producto", "indice_vulnerabilidad")
if (length(productos_seleccionados) == 0){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
if (anio_seleccionado != ""){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
} else if (tipo == 3) {
df <- indice_v_mensual
df$indice_vulnerabilidad <- df$indice_vulnerabilidad *100
df <- df %>%
select("mes_y_ano","anio","mes","indice_vulnerabilidad")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == anio)
}
} else if (tipo == 4) {
df <- indice_v_mensual_producto
df$indice_vulnerabilidad <- df$indice_vulnerabilidad *100
df <- df %>%
select("anio","mes","mes_y_ano","producto", "indice_vulnerabilidad")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == anio)}
}
if (tipo == 2) {
df <- rename(df, fecha = anio)
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$fecha , "<br> Producto:",df$producto, "<br> I.Vulnerabilidad:" , round(df$indice_vulnerabilidad,3))
p <- ggplot(df, aes(x = fecha, y = indice_vulnerabilidad, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Año", y = "Indice de Vulnerabilidad") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))+
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 4){
df <- rename(df, fecha = mes_y_ano)
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$anio , "<br> Mes:",df$mes, "<br> Producto:",df$producto, "<br> I.Vulnerabilidad:" , round(df$indice_vulnerabilidad,3))
p <- ggplot(df, aes(x = fecha, y = indice_vulnerabilidad, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Año", y = "Indice de Vulnerabilidad") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))
} else if (tipo == 1) {
df <- rename(df, fecha = anio)
df$tooltip_text <- paste("Año: ", df$fecha ,  "<br> I.Vulnerabilidad:" , round(df$indice_vulnerabilidad,3))
p<- ggplot(df, aes(x = fecha, y = indice_vulnerabilidad)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Año", y = "Indice de Vulnerabilidad") +
theme_minimal()  +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))+
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 3){
df <- rename(df, fecha = mes_y_ano)
df$tooltip_text <- paste("Año: ", df$anio , "<br> Mes:",df$mes, "<br> I.Vulnerabilidad:" , round(df$indice_vulnerabilidad,3))
p<- ggplot(df, aes(x = fecha, y = indice_vulnerabilidad)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Año", y = "Indice de Vulnerabilidad") +
theme_minimal()  +
scale_color_manual(values = col_palette)
}
# Calcular el valor máximo del índice de vulnerabilidad
indice_max_vulnerabilidad <- which.max(df$indice_vulnerabilidad)
max_vulnerabilidad <- round(df$indice_vulnerabilidad[indice_max_vulnerabilidad], 3)
fecha_max_vulnerabilidad <- df$fecha[indice_max_vulnerabilidad]
producto_max_vulnerabilidad <- ifelse("producto" %in% names(df), df$producto[indice_max_vulnerabilidad], NA)
p <- plotly::ggplotly(p, tooltip = "text")
df<-df%>%select(-tooltip_text)
# Devolver el gráfico, los datos y los valores máximos
return(list(
grafico = p,
datos = df,
max_vulnerabilidad = max_vulnerabilidad,
fecha_max_vulnerabilidad = fecha_max_vulnerabilidad,
producto_max_vulnerabilidad = producto_max_vulnerabilidad
))
}
grafica_indice(1)
grafica_indice(2,"",c("CEBOLLA JUNCA","ARROZ"))
runApp('~/GitHub/Tableros/Ind4')
runApp('~/GitHub/Tableros/Maps1')
runApp('~/GitHub/Tableros/Maps1')
runApp('~/GitHub/Tableros/Abs2')
runApp('~/GitHub/Tableros/Maps1')
runApp('~/GitHub/Tableros/Maps1')
runApp('~/GitHub/Tableros/Maps2')
