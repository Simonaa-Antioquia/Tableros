} else if (tipo == 3) {
df <- IHH_mensual_total
df$IHH <- df$IHH * 100
df <- df %>%
select("mes_y_ano","year","month","IHH")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == year)
}
} else if (tipo == 4) {
df <- IHH_mensual_producto
df$IHH <- df$IHH * 100
df <- df %>%
select("year","month","mes_y_ano","producto", "IHH")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == year)
}
}
if (tipo == 2) {
df <- rename(df, fecha = year)
df$tooltip_text <- paste("Año: ", df$fecha , "<br> Producto:",df$producto, "<br> IHH:" , round(df$IHH,3))
df <- df[df$producto %in% productos_seleccionados, ]
p <- ggplot(df, aes(x = fecha, y = IHH, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16)) +
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 4){
df <- rename(df, fecha = mes_y_ano)
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$year ,"<br> Mes:",df$month, "<br> Producto:",df$producto, "<br> IHH:" , round(df$IHH,3))
p <- ggplot(df, aes(x = fecha, y = IHH, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))
} else if (tipo == 1)  {
df <- rename(df, fecha = year)
df$tooltip_text <- paste("Año: ", df$fecha , "<br> IHH:" , round(df$IHH,3))
p <- ggplot(df, aes(x = fecha, y = IHH)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal() +
theme(text = element_text(family = "Prompt", size = 16)) +
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 3){
df <- rename(df, fecha = mes_y_ano)
df$tooltip_text <- paste("Año:", df$year ,"<br> Mes:",df$month, "<br> IHH:" , round(df$IHH,3))
p<- ggplot(df, aes(x = fecha, y = IHH)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = "Municipios en el abastecimiento") +
theme_minimal()  +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))
}
p <- plotly::ggplotly(p, tooltip = "text")
# Calcular el valor máximo del índice de vulnerabilidad
indice_max_ihh <- which.max(df$IHH)
max_IHH <- round(df$IHH[indice_max_ihh], 1)
fecha_max_vulnerabilidad <- df$fecha[indice_max_ihh]
producto_max_vulnerabilidad <- ifelse("producto" %in% names(df), df$producto[indice_max_ihh], NA)
df<-df%>%select(-tooltip_text)
# Devolver el gráfico, los datos y los valores máximos
return(list(
grafico = p,
datos = df,
max_vulnerabilidad = max_IHH,
fecha_max_vulnerabilidad = fecha_max_vulnerabilidad,
producto_max_vulnerabilidad = producto_max_vulnerabilidad
))
}
grafica_indice_mun(1)
runApp('~/GitHub/Tableros/Ind1')
plot_data(1)
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind3')
grafica_indice(1)
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind2')
runApp('~/GitHub/Tableros/Ind1')
runApp('~/GitHub/Tableros/Ind4')
grafica_indice(1)
grafica_indice <- function(tipo, anio_seleccionado = "", productos_seleccionados = "") {
if (tipo == 1 ) {
df <- indice_v_anual
df$indice_vulnerabilidad <- df$indice_vulnerabilidad * 100
df <- df %>%
select("anio", "indice_vulnerabilidad")
} else if (tipo == 2) {
df <- indice_v_anual_producto
df$indice_vulnerabilidad <- df$indice_vulnerabilidad *100
df <- df %>%
select("anio","producto", "indice_vulnerabilidad")
if (length(productos_seleccionados) == 0){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
if (anio_seleccionado != ""){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
} else if (tipo == 3) {
df <- indice_v_mensual
df$indice_vulnerabilidad <- df$indice_vulnerabilidad *100
df <- df %>%
select("mes_y_ano","anio","mes","indice_vulnerabilidad")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == anio)
}
} else if (tipo == 4) {
df <- indice_v_mensual_producto
df$indice_vulnerabilidad <- df$indice_vulnerabilidad *100
df <- df %>%
select("anio","mes","mes_y_ano","producto", "indice_vulnerabilidad")
if (anio_seleccionado != ""){
df <- df %>%
filter(anio_seleccionado == anio)}
}
if (tipo == 2) {
df <- rename(df, fecha = anio)
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$fecha , "<br> Producto:",df$producto, "<br> I.Vulnerabilidad:" , round(df$indice_vulnerabilidad,3))
p <- ggplot(df, aes(x = fecha, y = indice_vulnerabilidad, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Año", y = "Indice de Vulnerabilidad") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))+
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 4){
df <- rename(df, fecha = mes_y_ano)
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$anio , "<br> Mes:",df$mes, "<br> Producto:",df$producto, "<br> I.Vulnerabilidad:" , round(df$indice_vulnerabilidad,3))
p <- ggplot(df, aes(x = fecha, y = indice_vulnerabilidad, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Año", y = "Indice de Vulnerabilidad") +
theme_minimal() +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))
} else if (tipo == 1) {
df <- rename(df, fecha = anio)
df$tooltip_text <- paste("Año: ", df$fecha ,  "<br> I.Vulnerabilidad:" , round(df$indice_vulnerabilidad,3))
p<- ggplot(df, aes(x = fecha, y = indice_vulnerabilidad)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Año", y = "Indice de Vulnerabilidad") +
theme_minimal()  +
scale_color_manual(values = col_palette) +
theme(text = element_text(family = "Prompt", size = 16))+
scale_x_continuous(breaks = unique(df$fecha))
}else if (tipo == 3){
df <- rename(df, fecha = mes_y_ano)
df$tooltip_text <- paste("Año: ", df$anio , "<br> Mes:",df$mes, "<br> I.Vulnerabilidad:" , round(df$indice_vulnerabilidad,3))
p<- ggplot(df, aes(x = fecha, y = indice_vulnerabilidad)) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text), size = 1e-8) +
labs(x = "Año", y = "Indice de Vulnerabilidad") +
theme_minimal()  +
scale_color_manual(values = col_palette)
}
# Calcular el valor máximo del índice de vulnerabilidad
indice_max_vulnerabilidad <- which.max(df$indice_vulnerabilidad)
max_vulnerabilidad <- round(df$indice_vulnerabilidad[indice_max_vulnerabilidad], 3)
fecha_max_vulnerabilidad <- df$fecha[indice_max_vulnerabilidad]
producto_max_vulnerabilidad <- ifelse("producto" %in% names(df), df$producto[indice_max_vulnerabilidad], NA)
p <- plotly::ggplotly(p, tooltip = "text")
df<-df%>%select(-tooltip_text)
# Devolver el gráfico, los datos y los valores máximos
return(list(
grafico = p,
datos = df,
max_vulnerabilidad = max_vulnerabilidad,
fecha_max_vulnerabilidad = fecha_max_vulnerabilidad,
producto_max_vulnerabilidad = producto_max_vulnerabilidad
))
}
grafica_indice(1)
grafica_indice(2,"",c("CEBOLLA JUNCA","ARROZ"))
runApp('~/GitHub/Tableros/Ind4')
runApp('~/GitHub/Tableros/Maps1')
runApp('~/GitHub/Tableros/Maps1')
runApp('~/GitHub/Tableros/Abs2')
runApp('~/GitHub/Tableros/Maps1')
runApp('~/GitHub/Tableros/Maps1')
runApp('~/GitHub/Tableros/Maps2')
shiny::runApp()
View(entran)
entran_prod(año=2013,Mes =  1,depto =  "Antioquia")
entran_prod<-function(año = NULL, Mes = NULL, depto = NULL){
df<-entran
if(!is.null(año)&!is.null(Mes)&!is.null(depto)){
df<-df%>%filter(anio == año)%>%filter(mes == Mes)%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_mes_dpto, toneladas_total_producto_anio_mes_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_mes_dpto)
}
if(!is.null(año)&!is.null(depto)&is.null(Mes)){
df<-df%>%filter(anio == año)%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_dpto, toneladas_total_producto_anio_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_dpto, toneladas_r = toneladas_total_producto_anio_dpto)
}
if(is.null(año)&!is.null(depto)&is.null(Mes)){
df<-df%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_dpto, toneladas_total_producto_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_dpto, toneladas_r = toneladas_total_producto_dpto )
}
if(is.null(año)&is.null(depto)&is.null(Mes)){
df<-df%>%
select(producto,grupo_alimento,porcentaje_producto, toneladas_total_producto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto, toneladas_r = toneladas_total_producto)
}
if(!is.null(año)&is.null(depto)&is.null(Mes)){
df<-df%>%filter(anio == año)%>%
select(producto,grupo_alimento,porcentaje_producto_anio, toneladas_total_producto_anio)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio, toneladas_r = toneladas_total_producto_anio)
}
if(!is.null(año)&is.null(depto)&!is.null(Mes)){
df<-df%>%filter(anio == año)%>%filter(mes == Mes)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_mes,toneladas_total_producto_anio_mes)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_mes, toneladas_r = toneladas_total_producto_anio_mes)
}
titulo <- paste0("Productos que entran a Antioquia", ifelse(is.null(año),"",paste0(" para ",año)),
ifelse(is.null(Mes),"",paste0(" en el mes ", Mes)), ifelse(is.null(depto),"",paste0(" provenientes de ", depto)))
low_color <- "#2E7730"
high_color <- "#007CC3"
if(nrow(df)==0){
p<-  print("No hay datos disponibles")
p_plano <- NULL
} else {
df$tooltip_text <- paste("Producto:", df$producto , "<br> Porcentaje:", round(df$columna_porcentaje*100, digits = 1), "%", "<br> Toneladas:", formatC(df$toneladas_r, format = "f", digits = 1, big.mark = "."))
p <- hchart(df, "treemap", hcaes(x = producto, value = round(columna_porcentaje*100), color = round(columna_porcentaje*100))) %>%
hc_title(text = "") %>%
hc_subtitle(text = "") %>%
hc_colorAxis(minColor = low_color, maxColor = high_color) %>%
hc_tooltip(pointFormat = '{point.tooltip_text}')%>%
hc_caption(text = "Porcentaje", align = "center", verticalAlign = "bottom", y = -10)
p_plano<-ggplot(df, aes(area = columna_porcentaje, fill = columna_porcentaje,
label = producto)) +
geom_treemap() +
#geom_treemap_subgroup_border(colour = "white", size = 5) +
#geom_treemap_subgroup_text(place = "topleft", grow = FALSE,
#                          alpha = 0.3, colour = "black",
#                         fontface = "italic", size = 15) +
geom_treemap_text(colour = "white", place = "centre",
size = 15, grow = FALSE)+
scale_fill_gradient(low = low_color, high = high_color) +  # Usa un gradiente de colores
labs(title = "", fill = "Porcentaje")
}
porcentaje_max<-round(max(df$columna_porcentaje)*100)
producto_max<-df$producto[which.max(df$columna_porcentaje)]
return(
list(
grafico = p,
grafico_plano = p_plano,
datos = df,
porcentaje_max=porcentaje_max,
producto_max=tolower(producto_max)
)
)
}
entran_prod(año=2013,Mes =  1,depto =  "Antioquia")
entran_prod<-function(año = NULL, Mes = NULL, depto = NULL){
df<-entran
if(!is.null(año)&!is.null(Mes)&!is.null(depto)){
df<-df%>%filter(anio == año)%>%filter(mes == Mes)%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_mes_dpto, toneladas_total_producto_anio_mes_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_mes_dpto, toneladas_r = toneladas_total_producto_anio_mes_dpto)
}
if(!is.null(año)&!is.null(depto)&is.null(Mes)){
df<-df%>%filter(anio == año)%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_dpto, toneladas_total_producto_anio_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_dpto, toneladas_r = toneladas_total_producto_anio_dpto)
}
if(is.null(año)&!is.null(depto)&is.null(Mes)){
df<-df%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_dpto, toneladas_total_producto_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_dpto, toneladas_r = toneladas_total_producto_dpto )
}
if(is.null(año)&is.null(depto)&is.null(Mes)){
df<-df%>%
select(producto,grupo_alimento,porcentaje_producto, toneladas_total_producto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto, toneladas_r = toneladas_total_producto)
}
if(!is.null(año)&is.null(depto)&is.null(Mes)){
df<-df%>%filter(anio == año)%>%
select(producto,grupo_alimento,porcentaje_producto_anio, toneladas_total_producto_anio)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio, toneladas_r = toneladas_total_producto_anio)
}
if(!is.null(año)&is.null(depto)&!is.null(Mes)){
df<-df%>%filter(anio == año)%>%filter(mes == Mes)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_mes,toneladas_total_producto_anio_mes)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_mes, toneladas_r = toneladas_total_producto_anio_mes)
}
titulo <- paste0("Productos que entran a Antioquia", ifelse(is.null(año),"",paste0(" para ",año)),
ifelse(is.null(Mes),"",paste0(" en el mes ", Mes)), ifelse(is.null(depto),"",paste0(" provenientes de ", depto)))
low_color <- "#2E7730"
high_color <- "#007CC3"
if(nrow(df)==0){
p<-  print("No hay datos disponibles")
p_plano <- NULL
} else {
df$tooltip_text <- paste("Producto:", df$producto , "<br> Porcentaje:", round(df$columna_porcentaje*100, digits = 1), "%", "<br> Toneladas:", formatC(df$toneladas_r, format = "f", digits = 1, big.mark = "."))
p <- hchart(df, "treemap", hcaes(x = producto, value = round(columna_porcentaje*100), color = round(columna_porcentaje*100))) %>%
hc_title(text = "") %>%
hc_subtitle(text = "") %>%
hc_colorAxis(minColor = low_color, maxColor = high_color) %>%
hc_tooltip(pointFormat = '{point.tooltip_text}')%>%
hc_caption(text = "Porcentaje", align = "center", verticalAlign = "bottom", y = -10)
p_plano<-ggplot(df, aes(area = columna_porcentaje, fill = columna_porcentaje,
label = producto)) +
geom_treemap() +
#geom_treemap_subgroup_border(colour = "white", size = 5) +
#geom_treemap_subgroup_text(place = "topleft", grow = FALSE,
#                          alpha = 0.3, colour = "black",
#                         fontface = "italic", size = 15) +
geom_treemap_text(colour = "white", place = "centre",
size = 15, grow = FALSE)+
scale_fill_gradient(low = low_color, high = high_color) +  # Usa un gradiente de colores
labs(title = "", fill = "Porcentaje")
}
porcentaje_max<-round(max(df$columna_porcentaje)*100)
producto_max<-df$producto[which.max(df$columna_porcentaje)]
return(
list(
grafico = p,
grafico_plano = p_plano,
datos = df,
porcentaje_max=porcentaje_max,
producto_max=tolower(producto_max)
)
)
}
entran_prod(año=2013,Mes =  1,depto =  "Antioquia")
entran_prod<-function(año = NULL, Mes = NULL, depto = NULL){
df<-entran
if(!is.null(año)&!is.null(Mes)&!is.null(depto)){
df<-df%>%filter(anio == año)%>%filter(mes == Mes)%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_mes_dpto, toneladas_total_producto_anio_mes_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_mes_dpto, toneladas_r = toneladas_total_producto_anio_mes_dpto)
}
if(!is.null(año)&!is.null(depto)&is.null(Mes)){
df<-df%>%filter(anio == año)%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_dpto, toneladas_total_producto_anio_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_dpto, toneladas_r = toneladas_total_producto_anio_dpto)
}
if(is.null(año)&!is.null(depto)&is.null(Mes)){
df<-df%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_dpto, toneladas_total_producto_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_dpto, toneladas_r = toneladas_total_producto_dpto )
}
if(is.null(año)&is.null(depto)&is.null(Mes)){
df<-df%>%
select(producto,grupo_alimento,porcentaje_producto, toneladas_total_producto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto, toneladas_r = toneladas_total_producto)
}
if(!is.null(año)&is.null(depto)&is.null(Mes)){
df<-df%>%filter(anio == año)%>%
select(producto,grupo_alimento,porcentaje_producto_anio, toneladas_total_producto_anio)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio, toneladas_r = toneladas_total_producto_anio)
}
if(!is.null(año)&is.null(depto)&!is.null(Mes)){
df<-df%>%filter(anio == año)%>%filter(mes == Mes)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_mes,toneladas_total_producto_anio_mes)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_mes, toneladas_r = toneladas_total_producto_anio_mes)
}
titulo <- paste0("Productos que entran a Antioquia", ifelse(is.null(año),"",paste0(" para ",año)),
ifelse(is.null(Mes),"",paste0(" en el mes ", Mes)), ifelse(is.null(depto),"",paste0(" provenientes de ", depto)))
low_color <- "#2E7730"
high_color <- "#007CC3"
if(nrow(df)==0){
p<-  print("No hay datos disponibles")
p_plano <- NULL
} else {
df$tooltip_text <- paste("Producto:", df$producto , "<br> Porcentaje:", round(df$columna_porcentaje*100, digits = 1), "%", "<br> Toneladas:", formatC(df$toneladas_r, format = "f", digits = 0, big.mark = "."))
p <- hchart(df, "treemap", hcaes(x = producto, value = round(columna_porcentaje*100), color = round(columna_porcentaje*100))) %>%
hc_title(text = "") %>%
hc_subtitle(text = "") %>%
hc_colorAxis(minColor = low_color, maxColor = high_color) %>%
hc_tooltip(pointFormat = '{point.tooltip_text}')%>%
hc_caption(text = "Porcentaje", align = "center", verticalAlign = "bottom", y = -10)
p_plano<-ggplot(df, aes(area = columna_porcentaje, fill = columna_porcentaje,
label = producto)) +
geom_treemap() +
#geom_treemap_subgroup_border(colour = "white", size = 5) +
#geom_treemap_subgroup_text(place = "topleft", grow = FALSE,
#                          alpha = 0.3, colour = "black",
#                         fontface = "italic", size = 15) +
geom_treemap_text(colour = "white", place = "centre",
size = 15, grow = FALSE)+
scale_fill_gradient(low = low_color, high = high_color) +  # Usa un gradiente de colores
labs(title = "", fill = "Porcentaje")
}
porcentaje_max<-round(max(df$columna_porcentaje)*100)
producto_max<-df$producto[which.max(df$columna_porcentaje)]
return(
list(
grafico = p,
grafico_plano = p_plano,
datos = df,
porcentaje_max=porcentaje_max,
producto_max=tolower(producto_max)
)
)
}
entran_prod(año=2013,Mes =  1,depto =  "Antioquia")
entran_prod<-function(año = NULL, Mes = NULL, depto = NULL){
df<-entran
if(!is.null(año)&!is.null(Mes)&!is.null(depto)){
df<-df%>%filter(anio == año)%>%filter(mes == Mes)%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_mes_dpto, toneladas_total_producto_anio_mes_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_mes_dpto, toneladas_r = toneladas_total_producto_anio_mes_dpto)
}
if(!is.null(año)&!is.null(depto)&is.null(Mes)){
df<-df%>%filter(anio == año)%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_dpto, toneladas_total_producto_anio_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_dpto, toneladas_r = toneladas_total_producto_anio_dpto)
}
if(is.null(año)&!is.null(depto)&is.null(Mes)){
df<-df%>%filter(depto_origen==depto)%>%
select(producto,grupo_alimento,porcentaje_producto_dpto, toneladas_total_producto_dpto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_dpto, toneladas_r = toneladas_total_producto_dpto )
}
if(is.null(año)&is.null(depto)&is.null(Mes)){
df<-df%>%
select(producto,grupo_alimento,porcentaje_producto, toneladas_total_producto)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto, toneladas_r = toneladas_total_producto)
}
if(!is.null(año)&is.null(depto)&is.null(Mes)){
df<-df%>%filter(anio == año)%>%
select(producto,grupo_alimento,porcentaje_producto_anio, toneladas_total_producto_anio)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio, toneladas_r = toneladas_total_producto_anio)
}
if(!is.null(año)&is.null(depto)&!is.null(Mes)){
df<-df%>%filter(anio == año)%>%filter(mes == Mes)%>%
select(producto,grupo_alimento,porcentaje_producto_anio_mes,toneladas_total_producto_anio_mes)%>%
unique()%>%
rename( columna_porcentaje = porcentaje_producto_anio_mes, toneladas_r = toneladas_total_producto_anio_mes)
}
titulo <- paste0("Productos que entran a Antioquia", ifelse(is.null(año),"",paste0(" para ",año)),
ifelse(is.null(Mes),"",paste0(" en el mes ", Mes)), ifelse(is.null(depto),"",paste0(" provenientes de ", depto)))
low_color <- "#2E7730"
high_color <- "#007CC3"
if(nrow(df)==0){
p<-  print("No hay datos disponibles")
p_plano <- NULL
} else {
df$tooltip_text <- paste("Producto:", df$producto , "<br> Porcentaje:", round(df$columna_porcentaje*100, digits = 1), "%", "<br> Toneladas:", formatC(df$toneladas_r, format = "f", digits = 0, big.mark = ".", decimal.mark = ","))
p <- hchart(df, "treemap", hcaes(x = producto, value = round(columna_porcentaje*100), color = round(columna_porcentaje*100))) %>%
hc_title(text = "") %>%
hc_subtitle(text = "") %>%
hc_colorAxis(minColor = low_color, maxColor = high_color) %>%
hc_tooltip(pointFormat = '{point.tooltip_text}')%>%
hc_caption(text = "Porcentaje", align = "center", verticalAlign = "bottom", y = -10)
p_plano<-ggplot(df, aes(area = columna_porcentaje, fill = columna_porcentaje,
label = producto)) +
geom_treemap() +
#geom_treemap_subgroup_border(colour = "white", size = 5) +
#geom_treemap_subgroup_text(place = "topleft", grow = FALSE,
#                          alpha = 0.3, colour = "black",
#                         fontface = "italic", size = 15) +
geom_treemap_text(colour = "white", place = "centre",
size = 15, grow = FALSE)+
scale_fill_gradient(low = low_color, high = high_color) +  # Usa un gradiente de colores
labs(title = "", fill = "Porcentaje")
}
porcentaje_max<-round(max(df$columna_porcentaje)*100)
producto_max<-df$producto[which.max(df$columna_porcentaje)]
return(
list(
grafico = p,
grafico_plano = p_plano,
datos = df,
porcentaje_max=porcentaje_max,
producto_max=tolower(producto_max)
)
)
}
entran_prod(año=2013,Mes =  1,depto =  "Antioquia")
runApp()
