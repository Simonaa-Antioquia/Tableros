geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
} else if(tipo %in% c(4)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Fecha: ", df$anio , "<br>Mes:",df$mes,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f",digits = 1),"mil",
"<br> Volumen de ingreso (mil t):",formatC(df$ingresa_kg, format = "f",digits = 1),"mil",
"<br> Balance Alimentos:", formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano <-ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else if(tipo %in% c(3)){
df$tooltip_text <- paste("Fecha: ", format(as.Date(df$anio), "d%-%Y") , "<br>Mes:",df$mes,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f",digits = 1),"mil",
"<br> Volumen de ingreso (mil t):",  formatC(df$ingresa_kg, format = "f",digits = 1),"mil",
"<br> Balance Alimentos:",formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano<-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else {
df$tooltip_text <- paste("Año: ", df$anio ,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f", digits = 1),"mil",
"<br> Volumen de ingreso (mil t):", formatC(df$ingresa_kg, format = "f", digits = 1),"mil",
"<br> Balance Alimentos:", formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano <-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}
min_ton<-formatC((min(df$total_importado)*-1), format = "f", digits = 1)
fecha_min <- df$anio[which.min(df$total_importado)]
df<-df%>%select(-tooltip_text)
max_balance <- formatC(max(df$total_importado), format = "f", digits = 1)
producto_max_balance <- as.character(df$producto)[which.max(df$total_importado)]
anio_max <- as.character(df$anio)[which.max(df$total_importado)]
mes_max <- as.character(df$mes)[which.max(df$total_importado)]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list(
grafico = p,
grafico_plano = p_plano,
datos = df,
fecha_min=fecha_min,
min_ton=min_ton,
max_balance = max_balance,
producto_max_balance = producto_max_balance,
anio_max = anio_max,
mes_max = mes_max
))
}
neto_grafica(3)
#####
# FUNCION PARA VISUALIZAR LOS RESULTADOS
# FUNCION 2
# LINEA DE TIEMPO
neto_grafica <- function(tipo, productos_seleccionados = "") {
if (tipo == 1 ) {
df <- data_anual
tipo <- 1
} else if (tipo == 2) {
df <- data_anual_producto
df <- df %>%
select("anio","producto", "total_importado","sale_kg","ingresa_kg")
if (length(productos_seleccionados) == 0){
message("Para esta opcion debe escoger los productos que quiere graficar")
}
tipo <- 2
} else if (tipo == 3) {
df <- data_mensual
df <- df %>%
select("fecha","total_importado","sale_kg","ingresa_kg","mes")
tipo<- 3
df <- rename(df, anio = fecha)
} else if (tipo == 4) {
df <- data_mensual_producto
df <- df %>%
select("producto", "fecha","total_importado","sale_kg","ingresa_kg","mes")
df <- rename(df, anio = fecha)
if (length(productos_seleccionados) == 0){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
tipo <- 4
}
# Filtrar los productos seleccionados solo para las opciones 2 y 4
if (tipo %in% c(2)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$anio ,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f", digits = 1),"mil",
"<br> Volumen de ingreso (mil t):", formatC(df$ingresa_kg, format = "f", digits = 1),"mil",
"<br> Balance Alimentos:",formatC(df$total_importado,format = "f", digits = 1),"mil")
p_plano <- ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
} else if(tipo %in% c(4)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Fecha: ", df$anio , "<br>Mes:",df$mes,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f",digits = 1),"mil",
"<br> Volumen de ingreso (mil t):",formatC(df$ingresa_kg, format = "f",digits = 1),"mil",
"<br> Balance Alimentos:", formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano <-ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else if(tipo %in% c(3)){
df$tooltip_text <- paste("Fecha: ", format(as.Date(df$anio), "b%-%Y") , "<br>Mes:",df$mes,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f",digits = 1),"mil",
"<br> Volumen de ingreso (mil t):",  formatC(df$ingresa_kg, format = "f",digits = 1),"mil",
"<br> Balance Alimentos:",formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano<-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else {
df$tooltip_text <- paste("Año: ", df$anio ,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f", digits = 1),"mil",
"<br> Volumen de ingreso (mil t):", formatC(df$ingresa_kg, format = "f", digits = 1),"mil",
"<br> Balance Alimentos:", formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano <-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}
min_ton<-formatC((min(df$total_importado)*-1), format = "f", digits = 1)
fecha_min <- df$anio[which.min(df$total_importado)]
df<-df%>%select(-tooltip_text)
max_balance <- formatC(max(df$total_importado), format = "f", digits = 1)
producto_max_balance <- as.character(df$producto)[which.max(df$total_importado)]
anio_max <- as.character(df$anio)[which.max(df$total_importado)]
mes_max <- as.character(df$mes)[which.max(df$total_importado)]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list(
grafico = p,
grafico_plano = p_plano,
datos = df,
fecha_min=fecha_min,
min_ton=min_ton,
max_balance = max_balance,
producto_max_balance = producto_max_balance,
anio_max = anio_max,
mes_max = mes_max
))
}
neto_grafica(3)
#####
# FUNCION PARA VISUALIZAR LOS RESULTADOS
# FUNCION 2
# LINEA DE TIEMPO
neto_grafica <- function(tipo, productos_seleccionados = "") {
if (tipo == 1 ) {
df <- data_anual
tipo <- 1
} else if (tipo == 2) {
df <- data_anual_producto
df <- df %>%
select("anio","producto", "total_importado","sale_kg","ingresa_kg")
if (length(productos_seleccionados) == 0){
message("Para esta opcion debe escoger los productos que quiere graficar")
}
tipo <- 2
} else if (tipo == 3) {
df <- data_mensual
df <- df %>%
select("fecha","total_importado","sale_kg","ingresa_kg","mes")
tipo<- 3
df <- rename(df, anio = fecha)
} else if (tipo == 4) {
df <- data_mensual_producto
df <- df %>%
select("producto", "fecha","total_importado","sale_kg","ingresa_kg","mes")
df <- rename(df, anio = fecha)
if (length(productos_seleccionados) == 0){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
tipo <- 4
}
# Filtrar los productos seleccionados solo para las opciones 2 y 4
if (tipo %in% c(2)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$anio ,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f", digits = 1),"mil",
"<br> Volumen de ingreso (mil t):", formatC(df$ingresa_kg, format = "f", digits = 1),"mil",
"<br> Balance Alimentos:",formatC(df$total_importado,format = "f", digits = 1),"mil")
p_plano <- ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
} else if(tipo %in% c(4)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Fecha: ", df$anio , "<br>Mes:",df$mes,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f",digits = 1),"mil",
"<br> Volumen de ingreso (mil t):",formatC(df$ingresa_kg, format = "f",digits = 1),"mil",
"<br> Balance Alimentos:", formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano <-ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else if(tipo %in% c(3)){
df$tooltip_text <- paste("Fecha: ", format(as.Date(df$anio), "%d-%Y") , "<br>Mes:",df$mes,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f",digits = 1),"mil",
"<br> Volumen de ingreso (mil t):",  formatC(df$ingresa_kg, format = "f",digits = 1),"mil",
"<br> Balance Alimentos:",formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano<-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else {
df$tooltip_text <- paste("Año: ", df$anio ,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f", digits = 1),"mil",
"<br> Volumen de ingreso (mil t):", formatC(df$ingresa_kg, format = "f", digits = 1),"mil",
"<br> Balance Alimentos:", formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano <-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}
min_ton<-formatC((min(df$total_importado)*-1), format = "f", digits = 1)
fecha_min <- df$anio[which.min(df$total_importado)]
df<-df%>%select(-tooltip_text)
max_balance <- formatC(max(df$total_importado), format = "f", digits = 1)
producto_max_balance <- as.character(df$producto)[which.max(df$total_importado)]
anio_max <- as.character(df$anio)[which.max(df$total_importado)]
mes_max <- as.character(df$mes)[which.max(df$total_importado)]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list(
grafico = p,
grafico_plano = p_plano,
datos = df,
fecha_min=fecha_min,
min_ton=min_ton,
max_balance = max_balance,
producto_max_balance = producto_max_balance,
anio_max = anio_max,
mes_max = mes_max
))
}
neto_grafica(3)
#####
# FUNCION PARA VISUALIZAR LOS RESULTADOS
# FUNCION 2
# LINEA DE TIEMPO
neto_grafica <- function(tipo, productos_seleccionados = "") {
if (tipo == 1 ) {
df <- data_anual
tipo <- 1
} else if (tipo == 2) {
df <- data_anual_producto
df <- df %>%
select("anio","producto", "total_importado","sale_kg","ingresa_kg")
if (length(productos_seleccionados) == 0){
message("Para esta opcion debe escoger los productos que quiere graficar")
}
tipo <- 2
} else if (tipo == 3) {
df <- data_mensual
df <- df %>%
select("fecha","total_importado","sale_kg","ingresa_kg","mes")
tipo<- 3
df <- rename(df, anio = fecha)
} else if (tipo == 4) {
df <- data_mensual_producto
df <- df %>%
select("producto", "fecha","total_importado","sale_kg","ingresa_kg","mes")
df <- rename(df, anio = fecha)
if (length(productos_seleccionados) == 0){
stop("Para esta opcion debe escoger los productos que quiere graficar")
}
tipo <- 4
}
# Filtrar los productos seleccionados solo para las opciones 2 y 4
if (tipo %in% c(2)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Año: ", df$anio ,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f", digits = 1),"mil",
"<br> Volumen de ingreso (mil t):", formatC(df$ingresa_kg, format = "f", digits = 1),"mil",
"<br> Balance Alimentos:",formatC(df$total_importado,format = "f", digits = 1),"mil")
p_plano <- ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
} else if(tipo %in% c(4)) {
df <- df[df$producto %in% productos_seleccionados, ]
df$tooltip_text <- paste("Fecha: ", df$anio , "<br>Mes:",df$mes,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f",digits = 1),"mil",
"<br> Volumen de ingreso (mil t):",formatC(df$ingresa_kg, format = "f",digits = 1),"mil",
"<br> Balance Alimentos:", formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano <-ggplot(df, aes(x = anio, y = total_importado, color = producto)) +
geom_line() +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else if(tipo %in% c(3)){
df$tooltip_text <- paste("Fecha: ", format(as.Date(df$anio), "%m-%Y") , "<br>Mes:",df$mes,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f",digits = 1),"mil",
"<br> Volumen de ingreso (mil t):",  formatC(df$ingresa_kg, format = "f",digits = 1),"mil",
"<br> Balance Alimentos:",formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano<-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
#scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}else {
df$tooltip_text <- paste("Año: ", df$anio ,
"<br> Volumen de salidas (mil t):" , formatC(df$sale_kg, format = "f", digits = 1),"mil",
"<br> Volumen de ingreso (mil t):", formatC(df$ingresa_kg, format = "f", digits = 1),"mil",
"<br> Balance Alimentos:", formatC(df$total_importado, format = "f", digits = 1),"mil")
p_plano <-ggplot(df, aes(x = anio, y = total_importado)) +
geom_line(colour = "#1A4922") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Año", y = "Miles de toneladas") +
scale_x_continuous(breaks = seq(min(df$anio), max(df$anio))) +
scale_color_manual(values = col_palette) +
theme_minimal()
}
min_ton<-formatC((min(df$total_importado)*-1), format = "f", digits = 1)
fecha_min <- df$anio[which.min(df$total_importado)]
df<-df%>%select(-tooltip_text)
max_balance <- formatC(max(df$total_importado), format = "f", digits = 1)
producto_max_balance <- as.character(df$producto)[which.max(df$total_importado)]
anio_max <- as.character(df$anio)[which.max(df$total_importado)]
mes_max <- as.character(df$mes)[which.max(df$total_importado)]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list(
grafico = p,
grafico_plano = p_plano,
datos = df,
fecha_min=fecha_min,
min_ton=min_ton,
max_balance = max_balance,
producto_max_balance = producto_max_balance,
anio_max = anio_max,
mes_max = mes_max
))
}
neto_grafica(3)
runApp('~/GitHub/Tableros/Abs7')
runApp('~/GitHub/Tableros/Abs8')
runApp('~/GitHub/Tableros/Ind1')
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +
scale_color_manual(values = "#2E7730") +
theme(text = element_text( size = 16)) +
scale_x_continuous(
breaks = data$year
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$tooltip_text <- paste("Año: ", data$year ,"<br> Mes:" , data$month_completo, "<br> IHH:" , round(data$IHH,1))
data$month_completo <- mapeo_meses[data$month]
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month_completo,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 12))+
scale_x_date(date_breaks = "4 month", date_labels = "%Y-%m") +  # Establecer el formato de fecha
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Establecer la fuente y el tamaño del texto
if (!is.null(anio)) {
p_plano<-p_plano+scale_x_date(date_breaks = "1 months", date_labels = "%b")#+  # Configurar el eje X
#theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
}
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0,2013)
plot_data(1)
# Función para producir un gráfico de tiempo
plot_data <- function(tipo, anio = NULL) {
# Elegir el data frame correcto y el título
if (tipo == 1) {
data <- IHH_anual
data <- rename(data, date_col = year)
data$year <- data$date_col
data$IHH <- data$IHH * 100
# Crear un gráfico de tiempo
data$tooltip_text <- paste("Año: ", data$year , "<br> IHH:" , round(data$IHH,1))
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +
scale_color_manual(values = "#2E7730") +
theme(text = element_text( size = 16)) +
scale_x_continuous(
breaks = data$year
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
} else {
data <- IHH_mensual
data <- rename(data, date_col = mes_y_ano)
data$IHH <- data$IHH *100
data$month_completo <- mapeo_meses[data$month]
data$tooltip_text <- paste("Año: ", data$year ,"<br> Mes:" , data$month_completo, "<br> IHH:" , round(data$IHH,1))
# Si se especificó un año, filtrar los datos para ese año
if (!is.null(anio)) {
data$tooltip_text <- paste("Año: ", data$year , "<br> Mes:" , data$month_completo,  "<br> IHH:" , round(data$IHH,1))
data <- data %>% filter(year == anio)
}
# Crear un gráfico de tiempo
p_plano <- ggplot(data, aes_string(x = "date_col", y = "IHH")) +
geom_line(color = "#2E7730") +
geom_point(aes(text = tooltip_text),size = 1e-8) +
labs(x = "Fecha", y = " ") +
theme_minimal() +  # Usar un tema minimalista
scale_color_manual(values = "#2E7730") +  # Establecer el color de la línea
theme(text = element_text( size = 12))+
scale_x_date(date_breaks = "4 month", date_labels = "%Y-%m") +  # Establecer el formato de fecha
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Establecer la fuente y el tamaño del texto
if (!is.null(anio)) {
p_plano<-p_plano+scale_x_date(date_breaks = "1 months", date_labels = "%b")#+  # Configurar el eje X
#theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
}
}
data<-data%>%select(-tooltip_text)
# Calcular el valor máximo del índice de vulnerabilidad
max_IHH <- which.max(data$IHH)
max_IHH_value <- round(data$IHH[max_IHH], 3)
mes_max_IHH <- data$month[max_IHH]
anio_max_IHH <- data$year[max_IHH]
p <- plotly::ggplotly(p_plano, tooltip = "text")
return(list("plot" = p, "data" = data, "max_IHH" = max_IHH_value, "mes_max_IHH" = mes_max_IHH,"anio_max_IHH" = anio_max_IHH, grafico_plano = p_plano))
}
plot_data(0,2013)
runApp('~/GitHub/Tableros/Ind1')
runApp('~/GitHub/Tableros/Ind1')
runApp('~/GitHub/Tableros/Ind2')
runApp('~/GitHub/Tableros/Ind2')
runApp('~/GitHub/Tableros/Ind2')
runApp('~/GitHub/Tableros/Ind2')
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind3')
runApp('~/GitHub/Tableros/Ind4')
runApp('~/GitHub/Tableros/Ind4')
runApp('~/GitHub/Tableros/Ind4')
runApp('~/GitHub/Tableros/Ind4')
