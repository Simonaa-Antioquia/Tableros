# Obtener el valor más cercano a 0.8 (hacia arriba)
acumulado <- (df_filtrado$acumulado_total[index])
posicion_80 <- min(df_filtrado$producto[df_filtrado$acumulado_total == acumulado])  # Encuentra el valor mínimo donde se alcanza el 80%
if(nrow(df) > 0){
plot <- ggplot(df_filtrado, aes(x = reorder(producto, -total_sum), y = total_sum)) +
geom_bar(stat = "identity", fill = "#0D8D38", aes(text = tooltip_text1)) +
geom_line(aes(y = acumulado_total * total_sum_total), color = "#F39F06", group = 1) +
geom_point(aes(y = acumulado_total * total_sum_total, text = tooltip_text2), color = "#F39F06", group = 1) +
xlab("") +
geom_vline(xintercept = posicion_80, color = "blue", linetype = "dashed") +  # Agrega la línea vertical
ylab("Miles de toneladas") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),  # Rota los valores del eje x a 90 grados
panel.border = element_blank(),  # Elimina la caja alrededor del gráfico
axis.line = element_blank(),  # Elimina las líneas de los ejes
panel.grid.major = element_blank(),  # Elimina las líneas de la cuadrícula principal
panel.grid.minor = element_blank())  # Elimina las líneas de la cuadrícula secundaria
nombre_producto_80 <- df_filtrado$producto[df_filtrado$acumulado_total==acumulado]
p<-plotly::ggplotly(plot, tooltip = "text")%>%
layout(annotations = list(
x = nombre_producto_80,  # Asegúrate de que esto señale correctamente al producto deseado
y = 0,
text = "<b>Producto 80%</b>",  # Texto de ejemplo, ajusta según necesites
showarrow = F,
xanchor = 'center',
yanchor = 'bottom',
font = list(size = 12)
))
}else{
p<-print("No hay datos disponibles")
}
# Encontrar el índice del valor más cercano a 0.8 (hacia arriba)
index <- which.min(abs(df_filtrado$acumulado_total - 0.8))
# Si el valor es menor que 0.8, tomar el siguiente valor
if(nrow(df_filtrado)!=0){if (df_filtrado$acumulado_total[index] < 0.8) {
index <- index + 1
}}else{
("")
}
# Obtener el valor más cercano a 0.8 (hacia arriba)
acumulado <- round(df_filtrado$acumulado_total[index] * 100, digits = 1)
df<-df%>%
select(-graficar,-origen)
prod_neces<-nrow(df_filtrado[df_filtrado$acumulado_total <= acumulado/100+0.001, ])
porcent_prod<-round((prod_neces/length(df$producto))*100, digits = 1)
plot<-plot+
geom_text(aes(y = acumulado_total * total_sum_total, label = scales::percent(round(acumulado_total,1))), hjust = 1, color = "#000000", angle=90, size = 3)
return(list(
grafico_plano=plot,
grafico=p,
datos=df,
porcent_prod=porcent_prod,
acumulado=acumulado,
prod_neces=prod_neces,
num_productos = num_productos
))
}
pareto_graf(pareto = algo,año = 2013)$grafico
pareto_graf<-function(pareto,año=NULL, Mes=NULL, sitio=NULL){
if(is.null(año)&&is.null(Mes)&&is.null(sitio)){
df<-acum_total
df<-df%>%
filter(origen==pareto)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&is.null(Mes)&&is.null(sitio)){
df<-acum_total_anio
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&!is.null(Mes)&&is.null(sitio)){
df<-acum_total_anio_mes
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
filter(mes==Mes)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(is.null(año)&&is.null(Mes)&&!is.null(sitio)){
df<-acum_total_lugar
df<-df%>%
filter(origen==pareto)%>%
filter(lugar==sitio)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&is.null(Mes)&&!is.null(sitio)){
df<-acum_total_anio_lugar
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
filter(lugar==sitio)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&!is.null(Mes)&&!is.null(sitio)){
df<-acum_total_anio_mes_lugar
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
filter(mes==Mes)%>%
filter(lugar==sitio)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}
total_sum_total <- sum(df$total_sum)
if (nrow(df) > 0 && any(df$graficar == 1)) {
df_filtrado <- df %>% filter(graficar == 1)
} else {
df_filtrado <- df
}
num_productos <- nrow(df_filtrado)
df_filtrado$tooltip_text1 <- paste0("Producto: ", df_filtrado$producto, "<br>Cantidad: ", round(df_filtrado$total_sum,1))
df_filtrado$tooltip_text2 <- paste0("Producto: ", df_filtrado$producto, "<br>Porcentaje: ", round(df_filtrado$acumulado_total*100,1),"%")
index <- which.min(abs(df_filtrado$acumulado_total - 0.8))
# Si el valor es menor que 0.8, tomar el siguiente valor
if(nrow(df_filtrado)!=0){if (df_filtrado$acumulado_total[index] < 0.8) {
index <- index + 1
}}else{
("")
}
# Obtener el valor más cercano a 0.8 (hacia arriba)
acumulado <- (df_filtrado$acumulado_total[index])
posicion_80 <- min(df_filtrado$producto[df_filtrado$acumulado_total == acumulado])  # Encuentra el valor mínimo donde se alcanza el 80%
if(nrow(df) > 0){
plot <- ggplot(df_filtrado, aes(x = reorder(producto, -total_sum), y = total_sum)) +
geom_bar(stat = "identity", fill = "#0D8D38", aes(text = tooltip_text1)) +
geom_line(aes(y = acumulado_total * total_sum_total), color = "#F39F06", group = 1) +
geom_point(aes(y = acumulado_total * total_sum_total, text = tooltip_text2), color = "#F39F06", group = 1) +
xlab("") +
geom_vline(xintercept = posicion_80, color = "blue", linetype = "dashed") +  # Agrega la línea vertical
ylab("Miles de toneladas") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),  # Rota los valores del eje x a 90 grados
panel.border = element_blank(),  # Elimina la caja alrededor del gráfico
axis.line = element_blank(),  # Elimina las líneas de los ejes
panel.grid.major = element_blank(),  # Elimina las líneas de la cuadrícula principal
panel.grid.minor = element_blank())  # Elimina las líneas de la cuadrícula secundaria
nombre_producto_80 <- df_filtrado$producto[df_filtrado$acumulado_total==acumulado]
p<-plotly::ggplotly(plot, tooltip = "text")%>%
layout(annotations = list(
x = df_filtrado$producto[df_filtrado$producto==nombre_producto_80],  # Asegúrate de que esto señale correctamente al producto deseado
y = 0,
text = "<b>Producto 80%</b>",  # Texto de ejemplo, ajusta según necesites
showarrow = F,
xanchor = 'center',
yanchor = 'bottom',
font = list(size = 12)
))
}else{
p<-print("No hay datos disponibles")
}
# Encontrar el índice del valor más cercano a 0.8 (hacia arriba)
index <- which.min(abs(df_filtrado$acumulado_total - 0.8))
# Si el valor es menor que 0.8, tomar el siguiente valor
if(nrow(df_filtrado)!=0){if (df_filtrado$acumulado_total[index] < 0.8) {
index <- index + 1
}}else{
("")
}
# Obtener el valor más cercano a 0.8 (hacia arriba)
acumulado <- round(df_filtrado$acumulado_total[index] * 100, digits = 1)
df<-df%>%
select(-graficar,-origen)
prod_neces<-nrow(df_filtrado[df_filtrado$acumulado_total <= acumulado/100+0.001, ])
porcent_prod<-round((prod_neces/length(df$producto))*100, digits = 1)
plot<-plot+
geom_text(aes(y = acumulado_total * total_sum_total, label = scales::percent(round(acumulado_total,1))), hjust = 1, color = "#000000", angle=90, size = 3)
return(list(
grafico_plano=plot,
grafico=p,
datos=df,
porcent_prod=porcent_prod,
acumulado=acumulado,
prod_neces=prod_neces,
num_productos = num_productos
))
}
pareto_graf(pareto = algo,año = 2013)$grafico
pareto_graf(pareto = algo,año = 2013)$grafico
runApp('~/GitHub/Tableros/Abs8')
runApp('~/GitHub/Tableros/Abs8')
pareto_graf(pareto = algo)
algo<-"Neto_entra"
pareto_graf(pareto = algo)
pareto_graf<-function(pareto,año=NULL, Mes=NULL, sitio=NULL){
if(is.null(año)&&is.null(Mes)&&is.null(sitio)){
df<-acum_total
df<-df%>%
filter(origen==pareto)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&is.null(Mes)&&is.null(sitio)){
df<-acum_total_anio
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&!is.null(Mes)&&is.null(sitio)){
df<-acum_total_anio_mes
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
filter(mes==Mes)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(is.null(año)&&is.null(Mes)&&!is.null(sitio)){
df<-acum_total_lugar
df<-df%>%
filter(origen==pareto)%>%
filter(lugar==sitio)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&is.null(Mes)&&!is.null(sitio)){
df<-acum_total_anio_lugar
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
filter(lugar==sitio)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&!is.null(Mes)&&!is.null(sitio)){
df<-acum_total_anio_mes_lugar
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
filter(mes==Mes)%>%
filter(lugar==sitio)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}
total_sum_total <- sum(df$total_sum)
if (nrow(df) > 0 && any(df$graficar == 1)) {
df_filtrado <- df %>% filter(graficar == 1)
} else {
df_filtrado <- df
}
num_productos <- nrow(df_filtrado)
df_filtrado$tooltip_text1 <- paste0("Producto: ", df_filtrado$producto, "<br>Cantidad: ", round(df_filtrado$total_sum,1))
df_filtrado$tooltip_text2 <- paste0("Producto: ", df_filtrado$producto, "<br>Porcentaje: ", round(df_filtrado$acumulado_total*100,1),"%")
index <- which.min(abs(df_filtrado$acumulado_total - 0.8))
# Si el valor es menor que 0.8, tomar el siguiente valor
if(nrow(df_filtrado)!=0){if (df_filtrado$acumulado_total[index] < 0.8) {
index <- index + 1
}}else{
("")
}
# Obtener el valor más cercano a 0.8 (hacia arriba)
acumulado <- (df_filtrado$acumulado_total[index])
posicion_80 <- min(df_filtrado$producto[df_filtrado$acumulado_total == acumulado])  # Encuentra el valor mínimo donde se alcanza el 80%
if(nrow(df) > 0){
plot <- ggplot(df_filtrado, aes(x = reorder(producto, -total_sum), y = total_sum)) +
geom_bar(stat = "identity", fill = "#0D8D38", aes(text = tooltip_text1)) +
geom_line(aes(y = acumulado_total * total_sum_total), color = "#F39F06", group = 1) +
geom_point(aes(y = acumulado_total * total_sum_total, text = tooltip_text2), color = "#F39F06", group = 1) +
xlab("") +
geom_vline(xintercept = posicion_80, color = "#00909C", linetype = "dashed") +  # Agrega la línea vertical
ylab("Miles de toneladas") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),  # Rota los valores del eje x a 90 grados
panel.border = element_blank(),  # Elimina la caja alrededor del gráfico
axis.line = element_blank(),  # Elimina las líneas de los ejes
panel.grid.major = element_blank(),  # Elimina las líneas de la cuadrícula principal
panel.grid.minor = element_blank())  # Elimina las líneas de la cuadrícula secundaria
p<-plotly::ggplotly(plot, tooltip = "text")
}else{
p<-print("No hay datos disponibles")
}
# Encontrar el índice del valor más cercano a 0.8 (hacia arriba)
index <- which.min(abs(df_filtrado$acumulado_total - 0.8))
# Si el valor es menor que 0.8, tomar el siguiente valor
if(nrow(df_filtrado)!=0){if (df_filtrado$acumulado_total[index] < 0.8) {
index <- index + 1
}}else{
("")
}
# Obtener el valor más cercano a 0.8 (hacia arriba)
acumulado <- round(df_filtrado$acumulado_total[index] * 100, digits = 1)
df<-df%>%
select(-graficar,-origen)
prod_neces<-nrow(df_filtrado[df_filtrado$acumulado_total <= acumulado/100+0.001, ])
porcent_prod<-round((prod_neces/length(df$producto))*100, digits = 3)
plot<-plot+
geom_text(aes(y = acumulado_total * total_sum_total, label = scales::percent(round(acumulado_total,1))), hjust = 1, color = "#000000", angle=90, size = 3)
return(list(
grafico_plano=plot,
grafico=p,
datos=df,
porcent_prod=porcent_prod,
acumulado=acumulado,
prod_neces=prod_neces,
num_productos = num_productos
))
}
pareto_graf(pareto = algo,año = 2013)$grafico_plano
pareto_graf<-function(pareto,año=NULL, Mes=NULL, sitio=NULL){
if(is.null(año)&&is.null(Mes)&&is.null(sitio)){
df<-acum_total
df<-df%>%
filter(origen==pareto)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&is.null(Mes)&&is.null(sitio)){
df<-acum_total_anio
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&!is.null(Mes)&&is.null(sitio)){
df<-acum_total_anio_mes
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
filter(mes==Mes)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(is.null(año)&&is.null(Mes)&&!is.null(sitio)){
df<-acum_total_lugar
df<-df%>%
filter(origen==pareto)%>%
filter(lugar==sitio)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&is.null(Mes)&&!is.null(sitio)){
df<-acum_total_anio_lugar
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
filter(lugar==sitio)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}else if(!is.null(año)&&!is.null(Mes)&&!is.null(sitio)){
df<-acum_total_anio_mes_lugar
df<-df%>%
filter(origen==pareto)%>%
filter(anio==año)%>%
filter(mes==Mes)%>%
filter(lugar==sitio)%>%
mutate(total_sum=total_sum/1000,
graficar=ifelse(acumulado_total<=0.85,1,0))
}
total_sum_total <- sum(df$total_sum)
if (nrow(df) > 0 && any(df$graficar == 1)) {
df_filtrado <- df %>% filter(graficar == 1)
} else {
df_filtrado <- df
}
num_productos <- nrow(df_filtrado)
df_filtrado$tooltip_text1 <- paste0("Producto: ", df_filtrado$producto, "<br>Cantidad: ", round(df_filtrado$total_sum,1))
df_filtrado$tooltip_text2 <- paste0("Producto: ", df_filtrado$producto, "<br>Porcentaje: ", round(df_filtrado$acumulado_total*100,1),"%")
index <- which.min(abs(df_filtrado$acumulado_total - 0.8))
# Si el valor es menor que 0.8, tomar el siguiente valor
if(nrow(df_filtrado)!=0){if (df_filtrado$acumulado_total[index] < 0.8) {
index <- index + 1
}}else{
("")
}
# Obtener el valor más cercano a 0.8 (hacia arriba)
acumulado <- (df_filtrado$acumulado_total[index])
posicion_80 <- min(df_filtrado$producto[df_filtrado$acumulado_total == acumulado])  # Encuentra el valor mínimo donde se alcanza el 80%
if(nrow(df) > 0){
plot <- ggplot(df_filtrado, aes(x = reorder(producto, -total_sum), y = total_sum)) +
geom_bar(stat = "identity", fill = "#0D8D38", aes(text = tooltip_text1)) +
geom_line(aes(y = acumulado_total * total_sum_total), color = "#F39F06", group = 1) +
geom_point(aes(y = acumulado_total * total_sum_total, text = tooltip_text2), color = "#F39F06", group = 1) +
xlab("") +
geom_vline(xintercept = posicion_80, color = "#00909C", linetype = "dashed") +  # Agrega la línea vertical
ylab("Miles de toneladas") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),  # Rota los valores del eje x a 90 grados
panel.border = element_blank(),  # Elimina la caja alrededor del gráfico
axis.line = element_blank(),  # Elimina las líneas de los ejes
panel.grid.major = element_blank(),  # Elimina las líneas de la cuadrícula principal
panel.grid.minor = element_blank())  # Elimina las líneas de la cuadrícula secundaria
p<-plotly::ggplotly(plot, tooltip = "text")
}else{
p<-print("No hay datos disponibles")
}
# Encontrar el índice del valor más cercano a 0.8 (hacia arriba)
index <- which.min(abs(df_filtrado$acumulado_total - 0.8))
# Si el valor es menor que 0.8, tomar el siguiente valor
if(nrow(df_filtrado)!=0){if (df_filtrado$acumulado_total[index] < 0.8) {
index <- index + 1
}}else{
("")
}
# Obtener el valor más cercano a 0.8 (hacia arriba)
acumulado <- round(df_filtrado$acumulado_total[index] * 100, digits = 1)
df<-df%>%
select(-graficar,-origen)
prod_neces<-nrow(df_filtrado[df_filtrado$acumulado_total <= acumulado/100+0.001, ])
porcent_prod<-round((prod_neces/length(df$producto))*100, digits = 1)
plot<-plot+
geom_text(aes(y = acumulado_total * total_sum_total, label = scales::percent(round(acumulado_total,3))), hjust = 1, color = "#000000", angle=90, size = 3)
return(list(
grafico_plano=plot,
grafico=p,
datos=df,
porcent_prod=porcent_prod,
acumulado=acumulado,
prod_neces=prod_neces,
num_productos = num_productos
))
}
pareto_graf(pareto = algo,año = 2013)$grafico_plano
shiny::runApp('~/GitHub/Tableros/Ind1')
runApp('~/GitHub/Tableros/Ind1')
runApp()
runApp()
runApp('~/GitHub/Tableros/Pre2')
runApp('~/GitHub/Tableros/Pre2')
runApp('~/GitHub/Tableros/Pre2')
runApp('~/GitHub/Tableros/Pre3')
runApp('~/GitHub/Tableros/Pre3')
runApp('~/GitHub/Tableros/Pre4')
runApp('~/GitHub/Tableros/Pre4')
# Define la interfaz de usuario
ui <- fluidPage(
tags$div(
style = "position: relative; min-height: 100vh; padding-bottom: 100px;",  # Añade un margen inferior
tags$head(
tags$title("Cantidades y precios por mes"),  # Añade esta línea
tags$link(rel = "stylesheet", type = "text/css", href = "https://fonts.googleapis.com/css2?family=Prompt&display=swap"),  # Importa la fuente Prompt
tags$style(HTML("
body {
overflow-x: hidden;
}
.main-header {
font-family: 'Prompt', sans-serif;
font-size: 40px;
color: #0D8D38;
}
.main-header_2 {
font-family: 'Prompt', sans-serif;
font-size: 20px;
color: #0D8D38;
}
.sub-header {
font-family: 'Prompt', sans-serif;
font-size: 20px;
}
.sub-header2 {
font-family: 'Prompt', sans-serif;
font-size: 15px;
}
")),
tags$script(src = "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML")
),
tags$h1("Relación entre volúmenes y precios de los alimentos", class = "main-header"),
tags$h1("Evolución del precio promedio por Kg en relación al volumen de ingreso a las centrales de abasto de Medellín", class = "main-header_2"),
div(
textOutput("subtitulo"),
class = "sub-header2",
style = "margin-bottom: 20px;"
),
div(class = "scrollable-content",
fluidRow(
column(6,
selectInput("producto", "Seleccione producto:", c("Todos los productos" = "total", as.character(productos_filtrados)))),
column(6,
selectInput("anio", "Seleccione un año:", c("Todos los años"="todos", sort(unique(complet$anio)))))
)),
div(
fluidRow(
column(9,
plotlyOutput("grafico",height = "300px"),
actionButton("descargar", "Gráfica", icon = icon("download")),
downloadButton("descargarDatos", "Datos"),
#actionButton("github", "GitHub", icon = icon("github")),
shiny::a("GitHub", href="https://github.com/Simonaa-Antioquia/Tableros/tree/cedda4a1d5d12a0ed8618b3b6539d9072412b947/Pre2", target="_blank",
class = "btn btn-default shiny-action-button", icon("github")),
downloadButton("report", "Generar informe"),
actionButton("reset", "Restablecer", icon = icon("refresh"))
#,
#tableOutput("vistaTabla")
),
column(3,
wellPanel(textOutput("mensaje2"),
style = "background-color: #0D8D38; color: #FFFFFF;"),
wellPanel(textOutput("mensaje3"),
style = "background-color: #005A45; color: #FFFFFF;"),
#wellPanel(textOutput("mensaje1"),
#         style = "background-color: #094735; color: #FFFFFF;")
)
),
tags$div(tags$p("Fuente: Cálculos propios a partir de datos del Sistema de Información de Precios y Abastecimiento del Sector Agropecuario (SIPSA).",
tags$br(),"",
tags$br(),"Para los productos fríjol verde, tomate, aguacate, banano, guayaba, mandarina, naranja, piña, arracacha, papa negra y yuca, los precios reportados corresponden a la variedad predominante en el mercado al momento de la recolección de la información.",
tags$br(),"De acuerdo con el SIPSA, el valor reportado corresponde al precio mayorista por kilogramo de producto de primera calidad en la Central Mayorista de Antioquia.",
tags$br(),"La información solo se muestra precios promedio en el centro de acopio de Medellín.", class = "sub-header2"),
tags$div(style = "text-align: left;",
tags$p("La elasticidad se calcula utilizando la siguiente fórmula, donde %P representa el cambio porcentual del precio y %Q el cambio porcentual de la cantidad demandada, ambos respecto al periodo anterior. Esta medida nos ayuda a entender cómo varía el precio ante cambios en la cantidad demandada:", class = "sub-header2", style = "margin-top: 3px;"),
tags$script(HTML('MathJax.Hub.Queue(["Typeset", MathJax.Hub, "mathjax-output"])')),
tags$div(id = "mathjax-output", HTML("$$\\text{Elasticidad} = \\frac{\\%P}{\\%Q}$$"))
),
style = "margin-top: 20px;")
),
br(),
br(),
br(),
tags$div(
tags$img(src = 'logo_2.png', style = "width: 100vw;"),
style = "position: absolute; bottom: 0; width: 100%;"
)
)
)
runApp('~/GitHub/Tableros/Pre4')
runApp('~/GitHub/Tableros/Pre3')
runApp('~/GitHub/Tableros/Pre4')
runApp('~/GitHub/Tableros/Pre4')
